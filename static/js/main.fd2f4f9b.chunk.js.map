{"version":3,"sources":["logo.svg","button.js","Panel.js","hooks/useOutsideAlerter.js","Solar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Button","props","that","className","state","isPanelActive","onClick","e","handleEvent","value","Panel","tempTbl","currentTarget","parentNode","offsetParent","rowIndex","target","cellIndex","colLength","cells","length","rowLength","rows","this","insertRow","insertCellsInAllRows","setState","wrapper","insertCells","limit","colIndex","i","insertCell","setAttribute","addEventListener","rowRange","renderTemplate","React","PureComponent","useOutsideAlerter","ref","useEffect","handleClickOutside","event","current","contains","emptyCell","document","querySelectorAll","forEach","item","index","classList","add","console","log","removeEventListener","Solar","useState","hidden","setHidden","defaultPanels","wrapperRef","useRef","data-val","src","logo","alt","cellPadding","cellSpacing","map","p","c1","c2","c3","c4","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fd2f4f9b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react';\r\n\r\nconst Button = (props) => {\r\n    let that = props.props;\r\n    return (<td className={that.state.isPanelActive ? 'active': 'emptyCell'}><button className={that.state.isPanelActive ? 'active': ''}  onClick={(e) => that.handleEvent(e)}>{that.props.value}</button></td>);\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\nimport Button from './button';\r\n\r\n\r\nexport default class Panel extends React.PureComponent {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            isPanelActive: false\r\n        };\r\n    }\r\n    handleEvent(e) {\r\n        let tempTbl = e.currentTarget.parentNode.offsetParent,\r\n            rowIndex = e.target.parentNode.parentNode.rowIndex,\r\n            cellIndex = e.target.parentNode.cellIndex,\r\n            colLength = e.target.parentNode.parentNode.cells.length,\r\n            rowLength = e.target.parentNode.offsetParent.rows.length;\r\n        (rowIndex === 0) && this.insertRow(tempTbl,colLength,0);\r\n        (rowIndex === rowLength-1) && this.insertRow(tempTbl,colLength,tempTbl.rows.length);\r\n        (cellIndex === 0) && this.insertCellsInAllRows(tempTbl,tempTbl.rows.length,1,0);\r\n        (cellIndex === colLength-1) && this.insertCellsInAllRows(tempTbl,tempTbl.rows.length,1,colLength);\r\n        return this.setState({isPanelActive: !this.state.isPanelActive});\r\n    }\r\n    insertRow(wrapper, colLength, rowIndex) {\r\n        wrapper.insertRow(rowIndex);\r\n        this.insertCells(wrapper, colLength, 0, rowIndex);\r\n    }\r\n    insertCells(wrapper, limit, colIndex, rowIndex) {\r\n        for(let i = 0; i<limit;i++){\r\n            let that = wrapper.rows[rowIndex].insertCell(colIndex);\r\n            that.setAttribute('class','emptyCell');\r\n            that.addEventListener(\"click\", (e) => {\r\n              //return this.handleEvent(e);\r\n            });\r\n        }\r\n    }\r\n    renderTemplate() {\r\n        return (<Button props={this} />);\r\n    }\r\n    insertCellsInAllRows(wrapper, rowRange, colLength, colIndex) {\r\n        for(let i = 0; i<rowRange;i++){\r\n            this.insertCells(wrapper, colLength, colIndex, i);\r\n        }\r\n    }\r\n    render() {\r\n        return this.renderTemplate();\r\n    }\r\n}","import { useEffect } from \"react\";\r\n\r\nfunction useOutsideAlerter(ref) {\r\n    useEffect(() => {\r\n        function handleClickOutside(event) {\r\n            if (ref.current && !ref.current.contains(event.target)) {\r\n                let emptyCell = document.querySelectorAll('.emptyCell').forEach((item,index) => {\r\n                    return item.classList.add('disabled');\r\n                });\r\n                console.log(emptyCell);\r\n            }\r\n        }\r\n\r\n        // Bind the event listener\r\n        document.addEventListener(\"mousedown\", handleClickOutside);\r\n        return () => {\r\n            document.removeEventListener(\"mousedown\", handleClickOutside);\r\n        };\r\n    }, [ref]);\r\n}\r\n\r\nexport default useOutsideAlerter;","import React, { useRef, useState } from 'react';\r\nimport Panel from './Panel';\r\nimport './Solar.css';\r\nimport logo from './logo.svg';\r\nimport useOutsideAlerter from './hooks/useOutsideAlerter';\r\n\r\nfunction Solar() {\r\n    const [hidden, setHidden] = useState(true);\r\n    const [defaultPanels] = useState([\r\n        {'c1':'A','c2':'E','c3':'F','c4':'B'},\r\n        {'c1':'L','c2':'a','c3':'b','c4':'G'},\r\n        {'c1':'K','c2':'c','c3':'e','c4':'H'},\r\n        {'c1':'D','c2':'J','c3':'I','c4':'C'}\r\n    ]);\r\n    const wrapperRef = useRef(null);\r\n    useOutsideAlerter(wrapperRef);\r\n    function renderPanels() {\r\n        return defaultPanels.map((p,i) => {\r\n            const {c1,c2,c3,c4} = p;\r\n            return (\r\n                <tr key={ i }>\r\n                    <Panel value={ c1}  />\r\n                    <Panel value={ c2 }  />\r\n                    <Panel value={ c3 }  />\r\n                    <Panel value={ c4 }  />\r\n                </tr>\r\n            );\r\n        });\r\n    }\r\n    function renderSolarPanel() {\r\n        return (\r\n            <div ref={wrapperRef}>\r\n                <table cellPadding=\"0\" cellSpacing=\"0\">\r\n                    <tbody>\r\n                        { renderPanels() }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        <div data-val={hidden}>\r\n            {!hidden ? renderSolarPanel() : <p className=\"content\">Shape your Solar panel <button onClick={() => setHidden(!hidden)}><img src={logo} className=\"App-logo\" alt=\"logo\" /></button></p>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Solar;","import React from 'react';\r\nimport './App.css';\r\n\r\nimport Solar from './Solar';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Solar />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}